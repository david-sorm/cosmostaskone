// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmostaskone/tokenlock.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TokenLockInternal struct {
	// the ID under which the TokenLock can be found in the key-value db,
	// of course with the correct prefix
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// address, from which the denoms were taken, and to which the denoms will be returned
	// in Bech32
	Creator string `protobuf:"bytes,2,opt,name=Creator,proto3" json:"Creator,omitempty"`
	// locked denoms
	Balances []*types.Coin `protobuf:"bytes,3,rep,name=Balances,proto3" json:"Balances,omitempty"`
	// by default false
	// only true if the token lock has been disabled by RemoveTokenLock
	Disabled bool `protobuf:"varint,4,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (m *TokenLockInternal) Reset()         { *m = TokenLockInternal{} }
func (m *TokenLockInternal) String() string { return proto.CompactTextString(m) }
func (*TokenLockInternal) ProtoMessage()    {}
func (*TokenLockInternal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a19d0d98178aa2, []int{0}
}
func (m *TokenLockInternal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenLockInternal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenLockInternal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenLockInternal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenLockInternal.Merge(m, src)
}
func (m *TokenLockInternal) XXX_Size() int {
	return m.Size()
}
func (m *TokenLockInternal) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenLockInternal.DiscardUnknown(m)
}

var xxx_messageInfo_TokenLockInternal proto.InternalMessageInfo

func (m *TokenLockInternal) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *TokenLockInternal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *TokenLockInternal) GetBalances() []*types.Coin {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *TokenLockInternal) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func init() {
	proto.RegisterType((*TokenLockInternal)(nil), "dsorm.cosmostaskone.cosmostaskone.TokenLockInternal")
}

func init() { proto.RegisterFile("cosmostaskone/tokenlock.proto", fileDescriptor_b7a19d0d98178aa2) }

var fileDescriptor_b7a19d0d98178aa2 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xe3, 0xf4, 0xd3, 0x47, 0x30, 0x12, 0x12, 0x9e, 0x4c, 0x25, 0xac, 0xc0, 0x94, 0xc9,
	0x56, 0xf9, 0xf3, 0x02, 0x6d, 0x97, 0x48, 0x88, 0x21, 0x62, 0x62, 0xb3, 0x1d, 0x0b, 0xa2, 0x24,
	0xbe, 0x95, 0x6d, 0x10, 0xbc, 0x45, 0x1f, 0x8b, 0xb1, 0x23, 0x23, 0x4a, 0x5e, 0x04, 0x35, 0x2d,
	0x95, 0xc2, 0xf8, 0xbb, 0x3a, 0x3a, 0xe7, 0x9e, 0x83, 0x2f, 0x34, 0xf8, 0x16, 0x7c, 0x90, 0xbe,
	0x06, 0x6b, 0x44, 0x80, 0xda, 0xd8, 0x06, 0x74, 0xcd, 0x57, 0x0e, 0x02, 0x90, 0xcb, 0xd2, 0x83,
	0x6b, 0xf9, 0x48, 0x34, 0xa6, 0x29, 0xdb, 0xa1, 0x50, 0xd2, 0x1b, 0xf1, 0x36, 0x53, 0x26, 0xc8,
	0x99, 0xd0, 0x50, 0xd9, 0x9d, 0xc5, 0xd5, 0x1a, 0xe1, 0xb3, 0xc7, 0xad, 0xed, 0x3d, 0xe8, 0x3a,
	0xb7, 0xc1, 0x38, 0x2b, 0x1b, 0x72, 0x8a, 0xe3, 0x7c, 0x49, 0x51, 0x8a, 0xb2, 0xe3, 0x22, 0xce,
	0x97, 0x84, 0xe2, 0xa3, 0x85, 0x33, 0x32, 0x80, 0xa3, 0xf1, 0x70, 0xfc, 0x45, 0x72, 0x87, 0x93,
	0xb9, 0x6c, 0xa4, 0xd5, 0xc6, 0xd3, 0x49, 0x3a, 0xc9, 0x4e, 0xae, 0xcf, 0xf7, 0x1f, 0xf0, 0x6d,
	0x24, 0xdf, 0x47, 0xf2, 0x05, 0x54, 0xb6, 0x38, 0x48, 0xc9, 0x14, 0x27, 0x65, 0xe5, 0xa5, 0x6a,
	0x4c, 0x49, 0xff, 0xa5, 0x28, 0x4b, 0x8a, 0x03, 0xcf, 0x1f, 0x3e, 0x3b, 0x86, 0x36, 0x1d, 0x43,
	0xdf, 0x1d, 0x43, 0xeb, 0x9e, 0x45, 0x9b, 0x9e, 0x45, 0x5f, 0x3d, 0x8b, 0x9e, 0x6e, 0x9f, 0xab,
	0xf0, 0xf2, 0xaa, 0xb8, 0x86, 0x56, 0x0c, 0xd5, 0xc5, 0x78, 0x9f, 0xf7, 0x3f, 0x1c, 0x3e, 0x56,
	0xc6, 0xab, 0xff, 0x43, 0xd3, 0x9b, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xd6, 0xa4, 0xfb,
	0x4d, 0x01, 0x00, 0x00,
}

func (m *TokenLockInternal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenLockInternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenLockInternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTokenlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTokenlock(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTokenlock(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTokenlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokenlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenLockInternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTokenlock(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTokenlock(uint64(l))
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovTokenlock(uint64(l))
		}
	}
	if m.Disabled {
		n += 2
	}
	return n
}

func sovTokenlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokenlock(x uint64) (n int) {
	return sovTokenlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenLockInternal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenLockInternal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenLockInternal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokenlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTokenlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &types.Coin{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTokenlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokenlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokenlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokenlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokenlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokenlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokenlock = fmt.Errorf("proto: unexpected end of group")
)
